{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Iteration: Baseline vs Optimal","provenance":[{"file_id":"1sL5A13fexfYgg-bL2r58plfxjlhflQTM","timestamp":1607170372728},{"file_id":"1TOwHy8EacOE6wJb7GL4F7pCUD8aalMFh","timestamp":1606797081505}],"collapsed_sections":["5uQVpzOj79h6","qmQChV6_O9z3","nF1B7b0UPcoe","IdnuDjMFPhNV","toO04szdsGft"]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"cells":[{"cell_type":"markdown","metadata":{"id":"hUcINA597C9h"},"source":["# Parameters and Initialization"]},{"cell_type":"code","metadata":{"id":"OcbAfgVr6qBI","executionInfo":{"status":"ok","timestamp":1608107025475,"user_tz":-60,"elapsed":2317,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["import random\n","import numpy as np\n","import pandas as pd\n","import plotly.graph_objects as go\n","import plotly.express as px\n","import matplotlib.pyplot as plt\n","import scipy.stats\n","from plotly.subplots import make_subplots\n","\n","#policy functions\n","rate_issuance = 0.01\n","rate_redemption = 0.01\n","base_rate_initial = 0.005\n","\n","#global variables\n","period = 24*365\n","month=24*30\n","day=24\n","\n","#ether price\n","price_ether_initial = 1000\n","price_ether = [price_ether_initial]\n","sd_ether=0.002\n","drift_ether = 0\n","\n","#LQTY price & airdrop\n","price_LQTY_initial = 1\n","price_LQTY = [price_LQTY_initial]\n","sd_LQTY=0.005\n","drift_LQTY = 0.0035\n","#reduced for now. otherwise the initial return too high\n","quantity_LQTY_airdrop = 500\n","supply_LQTY=[0]\n","LQTY_total_supply=100000000\n","\n","#PE ratio\n","PE_ratio = 50\n","\n","#natural rate\n","natural_rate_initial = 0.2\n","natural_rate = [natural_rate_initial]\n","sd_natural_rate=0.002\n","\n","#stability pool\n","initial_return=0.2\n","return_stability=[initial_return]\n","sd_return=0.001\n","sd_stability=0.001\n","drift_stability=1.002\n","theta=0.001\n","\n","#liquidity pool & redemption pool\n","sd_liquidity=0.001\n","sd_redemption=0.001\n","drift_liquidity=1.0003\n","redemption_star = 0.8\n","delta = -20\n","\n","#close troves\n","sd_closetroves=0.5\n","#sensitivity to LUSD price\n","beta = 0.2\n","\n","#open troves\n","distribution_parameter1_ether_quantity=10\n","distribution_parameter2_ether_quantity=500\n","distribution_parameter1_CR = 1.1\n","distribution_parameter2_CR = 0.1\n","distribution_parameter3_CR = 16\n","distribution_parameter1_inattention = 4\n","distribution_parameter2_inattention = 0.08\n","sd_opentroves=0.5\n","n_steady=0.5\n","initial_open=10\n","\n","#sensitivity to LUSD price & issuance fee\n","alpha = 0.3\n","\n","#number of runs in simulation\n","n_sim= 8640\n","n_iteration=10"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5uQVpzOj79h6"},"source":["# Exogenous Factors"]},{"cell_type":"markdown","metadata":{"id":"LJD8KocZ8DyE"},"source":["Natural Rate"]},{"cell_type":"code","metadata":{"id":"jXFxEoMI8f3p","executionInfo":{"status":"ok","timestamp":1608107025483,"user_tz":-60,"elapsed":2316,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["#natural rate\n","for i in range(1, period):\n","  random.seed(201597+10*i)\n","  shock_natural = random.normalvariate(0,sd_natural_rate)\n","  natural_rate.append(natural_rate[i-1]*(1+shock_natural))"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ga90d_-x8i7H"},"source":["LQTY Price - First Month"]},{"cell_type":"code","metadata":{"id":"2rFeHLrC8mym","executionInfo":{"status":"ok","timestamp":1608107025484,"user_tz":-60,"elapsed":2314,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["#LQTY price\n","for i in range(1, month):\n","  random.seed(2+13*i)\n","  shock_LQTY = random.normalvariate(0,sd_LQTY)  \n","  price_LQTY.append(price_LQTY[i-1]*(1+shock_LQTY)*(1+drift_LQTY))"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g16o3adZ8s76"},"source":["# Troves"]},{"cell_type":"markdown","metadata":{"id":"TVi8i23u80k2"},"source":["Liquidate Troves"]},{"cell_type":"code","metadata":{"id":"37mJLJakOl1o","executionInfo":{"status":"ok","timestamp":1608107025484,"user_tz":-60,"elapsed":2312,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def liquidate_troves(troves, index, data):\n","  troves['CR_current'] = troves['Ether_Price']*troves['Ether_Quantity']/troves['Supply']\n","  price_LUSD_previous = data.loc[index-1,'Price_LUSD']\n","  price_LQTY_previous = data.loc[index-1,'price_LQTY']\n","  stability_pool_previous = data.loc[index-1, 'stability']\n","\n","  troves_liquidated = troves[troves.CR_current < 1.1]\n","  troves = troves[troves.CR_current >= 1.1]\n","  debt_liquidated = troves_liquidated['Supply'].sum()\n","  ether_liquidated = troves_liquidated['Ether_Quantity'].sum()\n","  n_liquidate = troves_liquidated.shape[0]\n","  troves = troves.reset_index(drop = True)\n","\n","  liquidation_gain = ether_liquidated*price_ether_current - debt_liquidated*price_LUSD_previous\n","  airdrop_gain = price_LQTY_previous * quantity_LQTY_airdrop\n","  \n","  np.random.seed(2+index)\n","  shock_return = np.random.normal(0,sd_return)\n","  if index <= day:\n","   return_stability = initial_return*(1+shock_return)\n","  elif index<=month:\n","    #min function to rule out the large fluctuation caused by the large but temporary liquidation gain in a particular period\n","    return_stability = min(0.5, 365*(data.loc[index-day:index, 'liquidation_gain'].sum()+data.loc[index-day:index, 'airdrop_gain'].sum())/(price_LUSD_previous*stability_pool_previous))\n","  else:\n","    return_stability = (365/30)*(data.loc[index-month:index, 'liquidation_gain'].sum()+data.loc[index-month:index, 'airdrop_gain'].sum())/(price_LUSD_previous*stability_pool_previous)\n","  \n","  return[troves, return_stability, debt_liquidated, ether_liquidated, liquidation_gain, airdrop_gain, n_liquidate]"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DO1SWTM4OmrQ"},"source":["Close Troves"]},{"cell_type":"code","metadata":{"id":"WUB4mlPFOsA_","executionInfo":{"status":"ok","timestamp":1608107025485,"user_tz":-60,"elapsed":2309,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def close_troves(troves, index2, price_LUSD_previous):\n","  np.random.seed(208+index2)\n","  shock_closetroves = np.random.normal(0,sd_closetroves)\n","  n_troves = troves.shape[0]\n","\n","  if index2 <= 240:\n","    number_closetroves = np.random.uniform(0,1)\n","  elif price_LUSD_previous >=1:\n","    number_closetroves = max(0, n_steady * (1+shock_closetroves))\n","  else:\n","    number_closetroves = max(0, n_steady * (1+shock_closetroves)) + beta*(1-price_LUSD_previous)*n_troves\n","  \n","  number_closetroves = int(round(number_closetroves))\n","  \n","  random.seed(293+100*index2)\n","  drops = list(random.sample(range(len(troves)), number_closetroves))\n","  troves = troves.drop(drops)\n","  troves = troves.reset_index(drop=True)\n","  if len(troves) < number_closetroves:\n","    number_closetroves = -999\n","\n","  return[troves, number_closetroves]"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A1wVI54fOuWr"},"source":["Adjust Troves"]},{"cell_type":"code","metadata":{"id":"JISfxgNHOt60","executionInfo":{"status":"ok","timestamp":1608107025486,"user_tz":-60,"elapsed":2308,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def adjust_troves(troves, index):\n","  issuance_LUSD_adjust = 0\n","  random.seed(57984-3*index)\n","  ratio = random.uniform(0,1)\n","  #for i in range(0, troves.shape[0]):\n","  for i, working_trove in troves.iterrows():\n","    random.seed(187*index + 3*i)\n","    #working_trove = troves.iloc[i,:]\n","    p = random.uniform(0,1)\n","    check = (working_trove['CR_current']-working_trove['CR_initial'])/(working_trove['CR_initial']*working_trove['Rational_inattention'])\n","\n","  #A part of the troves are adjusted by adjusting debt\n","    if p >= ratio:\n","      if check<-1:\n","        working_trove['Supply'] = working_trove['Ether_Price']*working_trove['Ether_Quantity']/working_trove['CR_initial']\n","      if check>2:\n","        supply_new = working_trove['Ether_Price']*working_trove['Ether_Quantity']/working_trove['CR_initial']\n","        issuance_LUSD_adjust = issuance_LUSD_adjust + rate_issuance * (supply_new - working_trove['Supply'])\n","        working_trove['Supply'] = supply_new\n","  #Another part of the troves are adjusted by adjusting collaterals\n","    if p < ratio and (check < -1 or check > 2):\n","      working_trove['Ether_Quantity'] = working_trove['CR_initial']*working_trove['Supply']/working_trove['Ether_Price']\n","    \n","    #troves.loc[i] = working_trove\n","  return[troves, issuance_LUSD_adjust]"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GGwstsJnOxur"},"source":["Open Troves"]},{"cell_type":"code","metadata":{"id":"Vke4YmOuOzMl","executionInfo":{"status":"ok","timestamp":1608107025488,"user_tz":-60,"elapsed":2308,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def open_troves(troves, index1, price_LUSD_previous):\n","  random.seed(2019*index1)  \n","  issuance_LUSD_open = 0\n","  shock_opentroves = random.normalvariate(0,sd_opentroves)\n","  n_troves = troves.shape[0]\n","\n","  if index1<=0:\n","    number_opentroves = initial_open\n","  elif price_LUSD_previous <=1 + rate_issuance:\n","    number_opentroves = max(0, n_steady * (1+shock_opentroves))\n","  else:\n","    number_opentroves = max(0, n_steady * (1+shock_opentroves)) + alpha*(price_LUSD_previous-rate_issuance-1)*n_troves\n","  \n","  number_opentroves = int(round(float(number_opentroves)))\n","\n","  for i in range(0, number_opentroves):\n","    price_ether_current = price_ether[index1]\n","    \n","    np.random.seed(2033 + index1 + i*i)\n","    CR_ratio = distribution_parameter1_CR + distribution_parameter2_CR * np.random.chisquare(df=distribution_parameter3_CR)\n","    \n","    np.random.seed(20 + 10 * i + index1)\n","    quantity_ether = np.random.gamma(distribution_parameter1_ether_quantity, scale=distribution_parameter2_ether_quantity)\n","    \n","    np.random.seed(209870- index1 + i*i)\n","    rational_inattention = np.random.gamma(distribution_parameter1_inattention, scale=distribution_parameter2_inattention)\n","    \n","    supply_trove = price_ether_current * quantity_ether / CR_ratio\n","    issuance_LUSD_open = issuance_LUSD_open + rate_issuance * supply_trove\n","\n","    new_row = {\"Ether_Price\": price_ether_current, \"Ether_Quantity\": quantity_ether, \n","               \"CR_initial\": CR_ratio, \"Supply\": supply_trove, \n","               \"Rational_inattention\": rational_inattention, \"CR_current\": CR_ratio}\n","    troves = troves.append(new_row, ignore_index=True)\n","\n","  return[troves, number_opentroves, issuance_LUSD_open]"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qmQChV6_O9z3"},"source":["# LUSD Market"]},{"cell_type":"markdown","metadata":{"id":"g2oWllXDPCsO"},"source":["Stability Pool"]},{"cell_type":"code","metadata":{"id":"YwpdP8BhPB-0","executionInfo":{"status":"ok","timestamp":1608107025489,"user_tz":-60,"elapsed":2306,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def stability_update(stability_pool_previous, return_previous, index):\n","  np.random.seed(27+3*index)\n","  shock_stability = np.random.normal(0,sd_stability)\n","  natural_rate_current = natural_rate[index]\n","  if index <= month:\n","    stability_pool = stability_pool_previous* (drift_stability+shock_stability)* (1+ return_previous- natural_rate_current)**theta\n","  else:\n","    stability_pool = stability_pool_previous* (1+shock_stability)* (1+ return_previous- natural_rate_current)**theta\n","  return[stability_pool]"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xcEw1MYmPF2j"},"source":["LUSD Price, liquidity pool, and redemption"]},{"cell_type":"code","metadata":{"id":"lfoGN5EFPAbz","executionInfo":{"status":"ok","timestamp":1608107025797,"user_tz":-60,"elapsed":2611,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def price_stabilizer(troves, index, data, stability_pool, n_open):\n","  issuance_LUSD_stabilizer = 0\n","  redemption_fee = 0\n","  n_redempt = 0\n","  redempted = 0\n","  redemption_pool = 0  \n","#Calculating Price\n","  supply = troves['Supply'].sum()\n","  np.random.seed(20*index)\n","  shock_liquidity = np.random.normal(0,sd_liquidity)\n","  liquidity_pool_previous = float(data['liquidity'][index-1])\n","  price_LUSD_previous = float(data['Price_LUSD'][index-1])\n","  price_LUSD_current= price_LUSD_previous*((supply-stability_pool)/(liquidity_pool_previous*(drift_liquidity+shock_liquidity)))**(1/delta)\n","  \n","\n","#Liquidity Pool\n","  liquidity_pool = supply-stability_pool\n","\n","#Stabilizer\n","  #Ceiling Arbitrageurs\n","  if price_LUSD_current > 1.1 + rate_issuance:\n","    #supply_current = sum(troves['Supply'])\n","    supply_wanted=stability_pool+liquidity_pool_previous*(drift_liquidity+shock_liquidity)*((1.1+rate_issuance)/price_LUSD_previous)**delta\n","    supply_trove = supply_wanted - supply\n","\n","    CR_ratio = 1.1\n","    rational_inattention = 0.1\n","    quantity_ether = supply_trove * CR_ratio / price_ether_current\n","    issuance_LUSD_stabilizer = rate_issuance * supply_trove\n","\n","    new_row = {\"Ether_Price\": price_ether_current, \"Ether_Quantity\": quantity_ether, \"CR_initial\": CR_ratio,\n","               \"Supply\": supply_trove, \"Rational_inattention\": rational_inattention, \"CR_current\": CR_ratio}\n","    troves = troves.append(new_row, ignore_index=True)\n","    price_LUSD_current = 1.1 + rate_issuance\n","    #missing in the previous version  \n","    liquidity_pool = supply_wanted-stability_pool\n","    n_open=n_open+1\n","    \n","\n","  #Floor Arbitrageurs\n","  if price_LUSD_current < 1 - rate_redemption:\n","    np.random.seed(30*index)\n","    shock_redemption = np.random.normal(0,sd_redemption)\n","    redemption_ratio = redemption_star * (1+shock_redemption)\n","\n","    #supply_current = sum(troves['Supply'])\n","    supply_target=stability_pool+liquidity_pool_previous*(drift_liquidity+shock_liquidity)*((1-rate_redemption)/price_LUSD_previous)**delta\n","    supply_diff = supply - supply_target\n","    if supply_diff < redemption_ratio * liquidity_pool:\n","      redemption_pool=supply_diff\n","      #liquidity_pool = liquidity_pool - redemption_pool\n","      price_LUSD_current = 1 - rate_redemption\n","    else:\n","      redemption_pool=redemption_ratio * liquidity_pool\n","      #liquidity_pool = (1-redemption_ratio)*liquidity_pool\n","      price_LUSD_current= price_LUSD_previous * (liquidity_pool/(liquidity_pool_previous*(drift_liquidity+shock_liquidity)))**(1/delta)\n","    \n","    #Shutting down the riskiest troves\n","    troves = troves.sort_values(by='CR_current', ascending = True)\n","    quantity_working_trove = troves['Supply'][troves.index[0]]\n","    redempted = quantity_working_trove\n","    while redempted <= redemption_pool:\n","      troves = troves.drop(troves.index[0])\n","      quantity_working_trove = troves['Supply'][troves.index[0]]\n","      redempted = redempted + quantity_working_trove\n","      n_redempt = n_redempt + 1\n","    \n","    #Residuals\n","    redempted = redempted - quantity_working_trove\n","    residual = redemption_pool - redempted\n","    wk = troves.index[0]\n","    troves['Supply'][wk] = troves['Supply'][wk] - residual\n","    troves['Ether_Quantity'][wk] = troves['Ether_Quantity'][wk] - residual/price_ether_current\n","    troves['CR_current'][wk] = price_ether_current * troves['Ether_Quantity'][wk] / troves['Supply'][wk]\n","\n","    #Redemption Fee\n","    redemption_fee = rate_redemption * redemption_pool\n","    \n","\n","  troves = troves.reset_index(drop=True)\n","  return[price_LUSD_current, liquidity_pool, troves, issuance_LUSD_stabilizer, redemption_fee, n_redempt, redemption_pool, n_open]  \n"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nF1B7b0UPcoe"},"source":["# LQTY Market"]},{"cell_type":"code","metadata":{"id":"JdmdEwQDPfLb","executionInfo":{"status":"ok","timestamp":1608107025798,"user_tz":-60,"elapsed":2608,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["def LQTY_market(index, data):\n","  quantity_LQTY = (100000000/3)*(1-0.5**(index/period))\n","  np.random.seed(2+3*index)\n","  if index <= month: \n","    price_LQTY_current = price_LQTY[index-1]\n","    annualized_earning = (index/month)**0.5*np.random.normal(200000000,500000)\n","  else:\n","    revenue_issuance = data.loc[index-month:index, 'issuance_fee'].sum()\n","    revenue_redemption = data.loc[index-month:index, 'redemption_fee'].sum()\n","    annualized_earning = 365*(revenue_issuance+revenue_redemption)/30\n","    #discountin factor to factor in the risk in early days\n","    discount=index/period\n","    price_LQTY_current = discount*PE_ratio*annualized_earning/LQTY_total_supply\n","  \n","  MC_LQTY_current = price_LQTY_current * quantity_LQTY\n","  return[price_LQTY_current, annualized_earning, MC_LQTY_current]"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IdnuDjMFPhNV"},"source":["# Simulation Program"]},{"cell_type":"code","metadata":{"id":"2_Pgz_GKPjt8","executionInfo":{"status":"ok","timestamp":1608108843232,"user_tz":-60,"elapsed":1820038,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["x=list(range(n_iteration))\n","for j in range(0, n_iteration):\n","  #ether price\n","  price_ether = [price_ether_initial]\n","  for i in range(1, period):\n","    random.seed(2019375+10000*i+500*j)\n","    shock_ether = random.normalvariate(0,sd_ether)\n","    price_ether.append(price_ether[i-1]*(1+shock_ether)*(1+drift_ether))\n","\n","#Defining Initials\n","  initials = {\"Price_LUSD\":[1.00], \"Price_Ether\":[price_ether_initial], \"n_open\":[initial_open], \"n_close\":[0], \"n_liquidate\": [0], \"n_redempt\":[0], \n","            \"n_troves\":[initial_open], \"stability\":[0], \"liquidity\":[0], \"redemption_pool\":[0],\n","            \"supply_LUSD\":[0],  \"return_stability\":[initial_return], \"airdrop_gain\":[0], \"liquidation_gain\":[0],  \"issuance_fee\":[0], \"redemption_fee\":[0],\n","            \"price_LQTY\":[price_LQTY_initial], \"MC_LQTY\":[0], \"annualized_earning\":[0]}\n","  data = pd.DataFrame(initials)\n","  troves= pd.DataFrame({\"Ether_Price\":[], \"Ether_Quantity\":[], \"CR_initial\":[], \n","              \"Supply\":[], \"Rational_inattention\":[], \"CR_current\":[]})\n","  result_open = open_troves(troves, 0, data['Price_LUSD'][0])\n","  troves = result_open[0]\n","  issuance_LUSD_open = result_open[2]\n","  data.loc[0,'issuance_fee'] = issuance_LUSD_open * initials[\"Price_LUSD\"][0]\n","  data.loc[0,'supply_LUSD'] = troves[\"Supply\"].sum()\n","  data.loc[0,'liquidity'] = 0.5*troves[\"Supply\"].sum()\n","  data.loc[0,'stability'] = 0.5*troves[\"Supply\"].sum()\n","\n","  #Simulation Process\n","  for index in range(1, n_sim):\n","  #exogenous ether price input\n","    price_ether_current = price_ether[index]\n","    troves['Ether_Price'] = price_ether_current\n","    price_LUSD_previous = data.loc[index-1,'Price_LUSD']\n","    price_LQTY_previous = data.loc[index-1,'price_LQTY']\n","\n","  #trove liquidation & return of stability pool\n","    result_liquidation = liquidate_troves(troves, index, data)\n","    troves = result_liquidation[0]\n","    return_stability = result_liquidation[1]\n","    debt_liquidated = result_liquidation[2]\n","    ether_liquidated = result_liquidation[3]\n","    liquidation_gain = result_liquidation[4]\n","    airdrop_gain = result_liquidation[5]\n","    n_liquidate = result_liquidation[6]\n","\n","  #close troves\n","    result_close = close_troves(troves, index, price_LUSD_previous)\n","    troves = result_close[0]\n","    n_close = result_close[1]\n","    #if n_close<0:\n","    #  break\n","\n","  #adjust troves\n","    result_adjustment = adjust_troves(troves, index)\n","    troves = result_adjustment[0]\n","    issuance_LUSD_adjust = result_adjustment[1]\n","\n","  #open troves\n","    result_open = open_troves(troves, index, price_LUSD_previous)\n","    troves = result_open[0]\n","    n_open = result_open[1]  \n","    issuance_LUSD_open = result_open[2]\n","\n","  #Stability Pool\n","    stability_pool = stability_update(data.loc[index-1,'stability'], return_stability, index)[0]\n","\n","  #Calculating Price, Liquidity Pool, and Redemption\n","    result_price = price_stabilizer(troves, index, data, stability_pool, n_open)\n","    price_LUSD_current = result_price[0]\n","    liquidity_pool = result_price[1]\n","    troves = result_price[2]\n","    issuance_LUSD_stabilizer = result_price[3]\n","    redemption_fee = result_price[4]\n","    n_redempt = result_price[5]\n","    redemption_pool = result_price[6]\n","    n_open=result_price[7]\n","    if liquidity_pool<0:\n","      break\n","\n","  #LQTY Market\n","    result_LQTY = LQTY_market(index, data)\n","    price_LQTY_current = result_LQTY[0]\n","    annualized_earning = result_LQTY[1]\n","    MC_LQTY_current = result_LQTY[2]\n","\n","  #Summary\n","    issuance_fee = price_LUSD_current * (issuance_LUSD_adjust + issuance_LUSD_open + issuance_LUSD_stabilizer)\n","    n_troves = troves.shape[0]\n","    supply_LUSD = troves['Supply'].sum()\n","    if index >= month:\n","      price_LQTY.append(price_LQTY_current)\n","\n","    new_row = {\"Price_LUSD\":float(price_LUSD_current), \"Price_Ether\":float(price_ether_current), \"n_open\":float(n_open), \"n_close\":float(n_close), \n","             \"n_liquidate\":float(n_liquidate), \"n_redempt\": float(n_redempt), \"n_troves\":float(n_troves),\n","              \"stability\":float(stability_pool), \"liquidity\":float(liquidity_pool), \"redemption_pool\":float(redemption_pool), \"supply_LUSD\":float(supply_LUSD),\n","             \"issuance_fee\":float(issuance_fee), \"redemption_fee\":float(redemption_fee),\n","             \"airdrop_gain\":float(airdrop_gain), \"liquidation_gain\":float(liquidation_gain), \"return_stability\":float(return_stability), \n","             \"annualized_earning\":float(annualized_earning), \"MC_LQTY\":float(MC_LQTY_current), \"price_LQTY\":float(price_LQTY_current)\n","             }\n","    data = data.append(new_row, ignore_index=True)\n","    if price_LUSD_current < 0:\n","      break\n","  x[j] = data.describe()"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cTM8KsjawCbb","executionInfo":{"status":"ok","timestamp":1608108843318,"user_tz":-60,"elapsed":1820108,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}},"outputId":"a3fa5f3f-5a0e-42fc-8472-60d2a1c3db70"},"source":["x"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[        Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007378  1005.575844  ...  3.013603e+08        9.909372e+07\n"," std       0.007143    55.538106  ...  2.739325e+08        1.943446e+07\n"," min       0.990000   891.839460  ...  0.000000e+00        0.000000e+00\n"," 25%       1.003445   956.324208  ...  5.477652e+07        8.774799e+07\n"," 50%       1.008239  1010.658734  ...  2.197453e+08        9.475732e+07\n"," 75%       1.010845  1051.099940  ...  5.289622e+08        1.078805e+08\n"," max       1.110000  1131.223368  ...  9.018268e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007755   892.355836  ...  2.548399e+08        9.032276e+07\n"," std       0.006595    58.170431  ...  2.206866e+08        1.941420e+07\n"," min       0.990000   806.636369  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004529   847.509849  ...  5.460327e+07        8.237167e+07\n"," 50%       1.009216   873.969469  ...  2.028838e+08        8.643635e+07\n"," 75%       1.011132   939.428876  ...  4.388670e+08        9.081011e+07\n"," max       1.089385  1047.461679  ...  7.292905e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007970  1059.862714  ...  3.051989e+08        1.060506e+08\n"," std       0.007186    80.118496  ...  2.533485e+08        1.640125e+07\n"," min       0.990000   865.750066  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004298   994.874494  ...  6.465388e+07        1.007921e+08\n"," 50%       1.009183  1065.400069  ...  2.607993e+08        1.038909e+08\n"," 75%       1.011174  1135.142838  ...  5.260374e+08        1.074311e+08\n"," max       1.110000  1204.557328  ...  8.277651e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.008061   975.033007  ...  2.801065e+08        9.883879e+07\n"," std       0.006849    79.187438  ...  2.338206e+08        1.746539e+07\n"," min       0.990000   812.606483  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004720   898.784361  ...  5.869578e+07        9.370395e+07\n"," 50%       1.009437   993.063726  ...  2.439076e+08        9.579668e+07\n"," 75%       1.011234  1046.378475  ...  4.742345e+08        9.820788e+07\n"," max       1.090763  1093.119286  ...  7.637495e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007754   916.853237  ...  2.605373e+08        9.287405e+07\n"," std       0.007020    72.000025  ...  2.146643e+08        1.866418e+07\n"," min       0.990000   777.975231  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004156   841.432690  ...  5.479682e+07        8.644070e+07\n"," 50%       1.009060   935.364452  ...  2.302049e+08        8.918984e+07\n"," 75%       1.011090   966.692753  ...  4.596348e+08        9.272089e+07\n"," max       1.089974  1075.170750  ...  6.830934e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007933   969.019771  ...  2.741632e+08        9.769845e+07\n"," std       0.007049    76.247722  ...  2.263847e+08        1.761974e+07\n"," min       0.990000   816.370608  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004562   884.225245  ...  6.038817e+07        9.234144e+07\n"," 50%       1.008997   992.760204  ...  2.406136e+08        9.431618e+07\n"," 75%       1.011168  1029.158667  ...  4.701830e+08        9.688325e+07\n"," max       1.109594  1106.601930  ...  7.580039e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007345  1144.081640  ...  3.446980e+08        1.132267e+08\n"," std       0.007133    67.937581  ...  2.990604e+08        1.759937e+07\n"," min       0.990000   998.631579  ...  0.000000e+00        0.000000e+00\n"," 25%       1.002668  1091.710008  ...  6.271218e+07        1.025484e+08\n"," 50%       1.008629  1148.922378  ...  2.769262e+08        1.126794e+08\n"," 75%       1.011165  1193.192021  ...  6.272400e+08        1.204219e+08\n"," max       1.089715  1291.816192  ...  9.391537e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007840  1123.305569  ...  3.324193e+08        1.119952e+08\n"," std       0.006981    63.326633  ...  2.827900e+08        1.599812e+07\n"," min       0.990000   990.923771  ...  0.000000e+00        0.000000e+00\n"," 25%       1.004703  1075.026315  ...  6.470832e+07        1.053487e+08\n"," 50%       1.009009  1127.159249  ...  2.707693e+08        1.114132e+08\n"," 75%       1.011182  1171.967750  ...  5.823176e+08        1.146472e+08\n"," max       1.089094  1263.974315  ...  9.095258e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007517  1029.201542  ...  3.089636e+08        1.019124e+08\n"," std       0.006907    49.360444  ...  2.781233e+08        1.874910e+07\n"," min       0.990000   913.321597  ...  0.000000e+00        0.000000e+00\n"," 25%       1.003417   997.195865  ...  5.415833e+07        9.158532e+07\n"," 50%       1.008670  1027.443279  ...  2.294285e+08        9.730150e+07\n"," 75%       1.011116  1069.531878  ...  5.438347e+08        1.103838e+08\n"," max       1.096705  1139.446187  ...  9.122339e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns],\n","         Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n"," count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n"," mean      1.007629  1006.980348  ...  2.879562e+08        9.970188e+07\n"," std       0.007159    46.694202  ...  2.472479e+08        1.727745e+07\n"," min       0.990000   879.859630  ...  0.000000e+00        0.000000e+00\n"," 25%       1.003846   981.367841  ...  5.816209e+07        9.475607e+07\n"," 50%       1.008735  1007.398401  ...  2.358326e+08        9.698432e+07\n"," 75%       1.011105  1042.959601  ...  4.945661e+08        9.906324e+07\n"," max       1.093988  1136.890215  ...  8.593876e+08        2.005866e+08\n"," \n"," [8 rows x 19 columns]]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"SAtbZKtfayij"},"source":["#**Exhibition**"]},{"cell_type":"code","metadata":{"id":"HSqq3AWyXiYf","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1608108843320,"user_tz":-60,"elapsed":1820097,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}},"outputId":"ffda70c4-3161-4ca8-d603-8bb3e9eb6d87"},"source":["data_stat=x[0]\n","for i in range(1, n_iteration):\n","  data_stat = data_stat+x[i] \n"," \n","data_stat/n_iteration"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Price_LUSD</th>\n","      <th>Price_Ether</th>\n","      <th>n_open</th>\n","      <th>n_close</th>\n","      <th>n_liquidate</th>\n","      <th>n_redempt</th>\n","      <th>n_troves</th>\n","      <th>stability</th>\n","      <th>liquidity</th>\n","      <th>redemption_pool</th>\n","      <th>supply_LUSD</th>\n","      <th>return_stability</th>\n","      <th>airdrop_gain</th>\n","      <th>liquidation_gain</th>\n","      <th>issuance_fee</th>\n","      <th>redemption_fee</th>\n","      <th>price_LQTY</th>\n","      <th>MC_LQTY</th>\n","      <th>annualized_earning</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.007718</td>\n","      <td>1012.226951</td>\n","      <td>0.566725</td>\n","      <td>0.513252</td>\n","      <td>0.000023</td>\n","      <td>0.000428</td>\n","      <td>167.639688</td>\n","      <td>1.907782e+08</td>\n","      <td>1.362389e+08</td>\n","      <td>4.018697e+03</td>\n","      <td>3.270131e+08</td>\n","      <td>0.547878</td>\n","      <td>12367.543544</td>\n","      <td>-0.118815</td>\n","      <td>11214.332803</td>\n","      <td>40.186975</td>\n","      <td>24.740865</td>\n","      <td>2.950243e+08</td>\n","      <td>1.011715e+08</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.007002</td>\n","      <td>64.858108</td>\n","      <td>0.506145</td>\n","      <td>0.499852</td>\n","      <td>0.002152</td>\n","      <td>0.020379</td>\n","      <td>122.894903</td>\n","      <td>1.384577e+08</td>\n","      <td>9.691513e+07</td>\n","      <td>7.690842e+04</td>\n","      <td>2.348390e+08</td>\n","      <td>0.072226</td>\n","      <td>7233.792573</td>\n","      <td>11.044063</td>\n","      <td>11515.949602</td>\n","      <td>769.084214</td>\n","      <td>14.467681</td>\n","      <td>2.530059e+08</td>\n","      <td>1.786233e+07</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.990000</td>\n","      <td>875.391479</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>8.661897e+06</td>\n","      <td>1.529795e+06</td>\n","      <td>0.000000e+00</td>\n","      <td>1.055422e+07</td>\n","      <td>0.199858</td>\n","      <td>0.000000</td>\n","      <td>-1026.563335</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.004034</td>\n","      <td>956.845088</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>62.300000</td>\n","      <td>6.697925e+07</td>\n","      <td>5.594804e+07</td>\n","      <td>0.000000e+00</td>\n","      <td>1.259161e+08</td>\n","      <td>0.492308</td>\n","      <td>5667.875392</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>11.340032</td>\n","      <td>5.876554e+07</td>\n","      <td>9.376363e+07</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.008917</td>\n","      <td>1018.213996</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>130.950000</td>\n","      <td>1.526078e+08</td>\n","      <td>1.040759e+08</td>\n","      <td>0.000000e+00</td>\n","      <td>2.597673e+08</td>\n","      <td>0.547495</td>\n","      <td>12492.139970</td>\n","      <td>0.000000</td>\n","      <td>11557.806997</td>\n","      <td>0.000000</td>\n","      <td>24.985888</td>\n","      <td>2.411111e+08</td>\n","      <td>9.827657e+07</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.011121</td>\n","      <td>1064.555280</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>254.700000</td>\n","      <td>2.950827e+08</td>\n","      <td>2.029604e+08</td>\n","      <td>0.000000e+00</td>\n","      <td>4.975721e+08</td>\n","      <td>0.618500</td>\n","      <td>19212.201926</td>\n","      <td>0.000000</td>\n","      <td>19712.743733</td>\n","      <td>0.000000</td>\n","      <td>38.441672</td>\n","      <td>5.145877e+08</td>\n","      <td>1.038450e+08</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.096922</td>\n","      <td>1149.026125</td>\n","      <td>10.000000</td>\n","      <td>1.000000</td>\n","      <td>0.200000</td>\n","      <td>1.000000</td>\n","      <td>460.100000</td>\n","      <td>4.789983e+08</td>\n","      <td>3.931250e+08</td>\n","      <td>2.648470e+06</td>\n","      <td>8.712257e+08</td>\n","      <td>0.658955</td>\n","      <td>25152.014082</td>\n","      <td>0.000000</td>\n","      <td>173237.933397</td>\n","      <td>26484.696031</td>\n","      <td>50.304028</td>\n","      <td>8.284030e+08</td>\n","      <td>2.005866e+08</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Price_LUSD  Price_Ether  ...       MC_LQTY  annualized_earning\n","count  8640.000000  8640.000000  ...  8.640000e+03        8.640000e+03\n","mean      1.007718  1012.226951  ...  2.950243e+08        1.011715e+08\n","std       0.007002    64.858108  ...  2.530059e+08        1.786233e+07\n","min       0.990000   875.391479  ...  0.000000e+00        0.000000e+00\n","25%       1.004034   956.845088  ...  5.876554e+07        9.376363e+07\n","50%       1.008917  1018.213996  ...  2.411111e+08        9.827657e+07\n","75%       1.011121  1064.555280  ...  5.145877e+08        1.038450e+08\n","max       1.096922  1149.026125  ...  8.284030e+08        2.005866e+08\n","\n","[8 rows x 19 columns]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"toO04szdsGft"},"source":["#**Simulation with Policy Function**"]},{"cell_type":"code","metadata":{"id":"JnSlNKgFujKT","executionInfo":{"status":"ok","timestamp":1608110488194,"user_tz":-60,"elapsed":587219,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}}},"source":["y=list(range(n_iteration))\n","\n","for j in range(0, n_iteration):\n","  #ether price\n","  price_ether = [price_ether_initial]\n","  for i in range(1, period):\n","    random.seed(2019375+10000*i+500*j)\n","    shock_ether = random.normalvariate(0, sd_ether)\n","    price_ether.append(price_ether[i-1]*(1+shock_ether)*(1+drift_ether))\n","\n","  #Defining Initials\n","  initials = {\"Price_LUSD\":[1.00], \"Price_Ether\":[price_ether_initial], \"n_open\":[initial_open], \"n_close\":[0], \"n_liquidate\": [0], \"n_redempt\":[0], \n","            \"n_troves\":[initial_open], \"stability\":[0], \"liquidity\":[0], \"redemption_pool\":[0],\n","            \"supply_LUSD\":[0],  \"return_stability\":[initial_return], \"airdrop_gain\":[0], \"liquidation_gain\":[0],  \"issuance_fee\":[0], \"redemption_fee\":[0],\n","            \"price_LQTY\":[price_LQTY_initial], \"MC_LQTY\":[0], \"annualized_earning\":[0], \"base_rate\":[base_rate_initial]}\n","  data2 = pd.DataFrame(initials)\n","  troves2= pd.DataFrame({\"Ether_Price\":[], \"Ether_Quantity\":[], \"CR_initial\":[], \n","              \"Supply\":[], \"Rational_inattention\":[], \"CR_current\":[]})\n","  result_open = open_troves(troves2, 0, data2['Price_LUSD'][0])\n","  troves2 = result_open[0]\n","  issuance_LUSD_open = result_open[2]\n","  data2.loc[0,'issuance_fee'] = issuance_LUSD_open * initials[\"Price_LUSD\"][0]\n","  data2.loc[0,'supply_LUSD'] = troves2[\"Supply\"].sum()\n","  data2.loc[0,'liquidity'] = 0.5*troves2[\"Supply\"].sum()\n","  data2.loc[0,'stability'] = 0.5*troves2[\"Supply\"].sum()\n","\n","   #Simulation Process\n","  for index in range(1, n_sim):\n","  #exogenous ether price input\n","    price_ether_current = price_ether[index]\n","    troves2['Ether_Price'] = price_ether_current\n","    price_LUSD_previous = data2.loc[index-1,'Price_LUSD']\n","    price_LQTY_previous = data2.loc[index-1,'price_LQTY']\n","\n","  #policy function determine base rate\n","    base_rate_current = 0.005+ 0.98 * (data2.loc[index-1,'base_rate']-0.005) + 0.5*(data2.loc[index-1,'redemption_pool']/troves2['Supply'].sum())\n","    rate_issuance = base_rate_current\n","    rate_redemption = base_rate_current\n","\n","  #trove liquidation & return of stability pool\n","    result_liquidation = liquidate_troves(troves2, index, data2)\n","    troves2 = result_liquidation[0]\n","    return_stability = result_liquidation[1]\n","    debt_liquidated = result_liquidation[2]\n","    ether_liquidated = result_liquidation[3]\n","    liquidation_gain = result_liquidation[4]\n","    airdrop_gain = result_liquidation[5]\n","    n_liquidate = result_liquidation[6]\n","\n","  #close troves\n","    result_close = close_troves(troves2, index, price_LUSD_previous)\n","    troves2 = result_close[0]\n","    n_close = result_close[1]\n","    #if n_close<0:\n","    #  break\n","\n","  #adjust troves\n","    result_adjustment = adjust_troves(troves2, index)\n","    troves2 = result_adjustment[0]\n","    issuance_LUSD_adjust = result_adjustment[1]\n","\n","  #open troves\n","    result_open = open_troves(troves2, index, price_LUSD_previous)\n","    troves2 = result_open[0]\n","    n_open = result_open[1]  \n","    issuance_LUSD_open = result_open[2]\n","\n","  #Stability Pool\n","    stability_pool = stability_update(data2.loc[index-1,'stability'], return_stability, index)[0]\n","\n","  #Calculating Price, Liquidity Pool, and Redemption\n","    result_price = price_stabilizer(troves2, index, data2, stability_pool, n_open)\n","    price_LUSD_current = result_price[0]\n","    liquidity_pool = result_price[1]\n","    troves2 = result_price[2]\n","    issuance_LUSD_stabilizer = result_price[3]\n","    redemption_fee = result_price[4]\n","    n_redempt = result_price[5]\n","    redemption_pool = result_price[6]\n","    n_open=result_price[7]\n","    if liquidity_pool<0:\n","      break\n","\n","  #LQTY Market\n","    result_LQTY = LQTY_market(index, data2)\n","    price_LQTY_current = result_LQTY[0]\n","    annualized_earning = result_LQTY[1]\n","    MC_LQTY_current = result_LQTY[2]\n","\n","  #Summary\n","    issuance_fee = price_LUSD_current * (issuance_LUSD_adjust + issuance_LUSD_open + issuance_LUSD_stabilizer)\n","    n_troves = troves2.shape[0]\n","    supply_LUSD = troves2['Supply'].sum()\n","    if index >= month:\n","      price_LQTY.append(price_LQTY_current)\n","\n","    new_row = {\"Price_LUSD\":float(price_LUSD_current), \"Price_Ether\":float(price_ether_current), \"n_open\":float(n_open), \"n_close\":float(n_close), \n","             \"n_liquidate\":float(n_liquidate), \"n_redempt\": float(n_redempt), \"n_troves\":float(n_troves),\n","              \"stability\":float(stability_pool), \"liquidity\":float(liquidity_pool), \"redemption_pool\":float(redemption_pool), \"supply_LUSD\":float(supply_LUSD),\n","             \"issuance_fee\":float(issuance_fee), \"redemption_fee\":float(redemption_fee),\n","             \"airdrop_gain\":float(airdrop_gain), \"liquidation_gain\":float(liquidation_gain), \"return_stability\":float(return_stability), \n","             \"annualized_earning\":float(annualized_earning), \"MC_LQTY\":float(MC_LQTY_current), \"price_LQTY\":float(price_LQTY_current), \n","             \"base_rate\":float(base_rate_current)}\n","    data2 = data2.append(new_row, ignore_index=True)\n","    if price_LUSD_current < 0:\n","      break\n","  y[j] = data2.describe()"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TRieQ_0IvRIA","executionInfo":{"status":"ok","timestamp":1608110488213,"user_tz":-60,"elapsed":110,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}},"outputId":"ce8a6f31-a5cd-49ef-a8fe-8b0c208f659b"},"source":["y"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[        Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004241  1005.575844  ...        6.449196e+07     0.006734\n"," std       0.007739    55.538106  ...        3.098159e+07     0.005201\n"," min       0.973850   891.839460  ...        0.000000e+00     0.005000\n"," 25%       1.000708   956.324208  ...        4.869452e+07     0.005000\n"," 50%       1.004050  1010.658734  ...        5.206376e+07     0.005000\n"," 75%       1.006525  1051.099940  ...        6.623663e+07     0.005841\n"," max       1.122480  1131.223368  ...        2.005866e+08     0.079862\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004209   892.355836  ...        6.054135e+07     0.006851\n"," std       0.007439    58.170431  ...        3.467541e+07     0.005569\n"," min       0.971831   806.636369  ...        0.000000e+00     0.005000\n"," 25%       1.001197   847.509849  ...        4.135317e+07     0.005000\n"," 50%       1.004431   873.969469  ...        4.379581e+07     0.005000\n"," 75%       1.006369   939.428876  ...        7.049788e+07     0.005713\n"," max       1.122039  1047.461679  ...        2.005866e+08     0.077974\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004397  1059.862714  ...        7.161964e+07     0.007037\n"," std       0.007893    80.118496  ...        3.419551e+07     0.005512\n"," min       0.972435   865.750066  ...        0.000000e+00     0.005000\n"," 25%       1.000958   994.874494  ...        5.003054e+07     0.005000\n"," 50%       1.004582  1065.400069  ...        5.437795e+07     0.005000\n"," 75%       1.006480  1135.142838  ...        8.059854e+07     0.005821\n"," max       1.121635  1204.557328  ...        2.005866e+08     0.076245\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004612   975.033007  ...        6.582408e+07     0.006915\n"," std       0.007683    79.187438  ...        3.347117e+07     0.005372\n"," min       0.971981   812.606483  ...        0.000000e+00     0.005000\n"," 25%       1.001568   898.784361  ...        4.572859e+07     0.005000\n"," 50%       1.004700   993.063726  ...        5.270232e+07     0.005000\n"," 75%       1.006469  1046.378475  ...        7.131737e+07     0.006196\n"," max       1.122360  1093.119286  ...        2.005866e+08     0.079349\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004420   916.853237  ...        6.201079e+07     0.006866\n"," std       0.007484    72.000025  ...        3.287480e+07     0.005240\n"," min       0.972430   777.975231  ...        0.000000e+00     0.005000\n"," 25%       1.000861   841.432690  ...        4.329398e+07     0.005000\n"," 50%       1.004705   935.364452  ...        4.794687e+07     0.005000\n"," 75%       1.006633   966.692753  ...        6.346033e+07     0.006031\n"," max       1.121384  1075.170750  ...        2.005866e+08     0.075168\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004525   969.019771  ...        6.557534e+07     0.006992\n"," std       0.008093    76.247722  ...        3.380801e+07     0.005691\n"," min       0.972213   816.370608  ...        0.000000e+00     0.005000\n"," 25%       1.000933   884.225245  ...        4.488837e+07     0.005000\n"," 50%       1.004696   992.760204  ...        4.987832e+07     0.005000\n"," 75%       1.006522  1029.158667  ...        7.191275e+07     0.006136\n"," max       1.129312  1106.601930  ...        2.005866e+08     0.083472\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004287  1144.081640  ...        7.478860e+07     0.007128\n"," std       0.007942    67.937581  ...        3.097434e+07     0.005828\n"," min       0.971223   998.631579  ...        0.000000e+00     0.005000\n"," 25%       1.000569  1091.710008  ...        5.696729e+07     0.005000\n"," 50%       1.004385  1148.922378  ...        6.138733e+07     0.005000\n"," 75%       1.006654  1193.192021  ...        8.203383e+07     0.006642\n"," max       1.128544  1291.816192  ...        2.005866e+08     0.080993\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004384  1123.305569  ...        7.421466e+07     0.007007\n"," std       0.007805    63.326633  ...        3.223199e+07     0.005295\n"," min       0.969015   990.923771  ...        0.000000e+00     0.005000\n"," 25%       1.000842  1075.026315  ...        5.519341e+07     0.005000\n"," 50%       1.004409  1127.159249  ...        5.884516e+07     0.005000\n"," 75%       1.006673  1171.967750  ...        8.711689e+07     0.006221\n"," max       1.125619  1263.974315  ...        2.005866e+08     0.071551\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004034  1029.201542  ...        6.640040e+07     0.006744\n"," std       0.007591    49.360444  ...        3.118780e+07     0.004845\n"," min       0.971942   913.321597  ...        0.000000e+00     0.005000\n"," 25%       1.000331   997.195865  ...        5.091235e+07     0.005000\n"," 50%       1.003980  1027.443279  ...        5.311356e+07     0.005000\n"," 75%       1.006387  1069.531878  ...        6.494677e+07     0.006099\n"," max       1.118840  1139.446187  ...        2.005866e+08     0.064271\n"," \n"," [8 rows x 20 columns],\n","         Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n"," count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n"," mean      1.004099  1006.980348  ...        6.659139e+07     0.006885\n"," std       0.007537    46.694202  ...        3.158348e+07     0.005223\n"," min       0.972219   879.859630  ...        0.000000e+00     0.005000\n"," 25%       1.000444   981.367841  ...        4.768108e+07     0.005000\n"," 50%       1.004051  1007.398401  ...        5.048475e+07     0.005000\n"," 75%       1.006650  1042.959601  ...        7.317323e+07     0.006045\n"," max       1.121756  1136.890215  ...        2.005866e+08     0.076762\n"," \n"," [8 rows x 20 columns]]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"A_dsMFg92s98"},"source":["#**Exhibition**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"HViQx_hR2x4x","executionInfo":{"status":"ok","timestamp":1608110488214,"user_tz":-60,"elapsed":48,"user":{"displayName":"Robert Lauko","photoUrl":"","userId":"17464564372410515989"}},"outputId":"83737ad8-1b41-4b92-a51f-8ea73bfc8e49"},"source":["data_stat_new=y[0]\n","for i in range(1, n_iteration):\n","  data_stat_new = data_stat_new+y[i] \n"," \n","data_stat_new/n_iteration"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Price_LUSD</th>\n","      <th>Price_Ether</th>\n","      <th>n_open</th>\n","      <th>n_close</th>\n","      <th>n_liquidate</th>\n","      <th>n_redempt</th>\n","      <th>n_troves</th>\n","      <th>stability</th>\n","      <th>liquidity</th>\n","      <th>redemption_pool</th>\n","      <th>supply_LUSD</th>\n","      <th>return_stability</th>\n","      <th>airdrop_gain</th>\n","      <th>liquidation_gain</th>\n","      <th>issuance_fee</th>\n","      <th>redemption_fee</th>\n","      <th>price_LQTY</th>\n","      <th>MC_LQTY</th>\n","      <th>annualized_earning</th>\n","      <th>base_rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8640.000000</td>\n","      <td>8.640000e+03</td>\n","      <td>8.640000e+03</td>\n","      <td>8640.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.004321</td>\n","      <td>1012.226951</td>\n","      <td>0.561493</td>\n","      <td>0.518831</td>\n","      <td>0.000150</td>\n","      <td>0.000509</td>\n","      <td>140.679225</td>\n","      <td>1.271371e+08</td>\n","      <td>1.471330e+08</td>\n","      <td>5.043902e+03</td>\n","      <td>2.742650e+08</td>\n","      <td>0.455690</td>\n","      <td>6686.730747</td>\n","      <td>1.585160</td>\n","      <td>7513.050569</td>\n","      <td>44.667096</td>\n","      <td>13.376226</td>\n","      <td>1.491205e+08</td>\n","      <td>6.720582e+07</td>\n","      <td>0.006916</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.007721</td>\n","      <td>64.858108</td>\n","      <td>0.506862</td>\n","      <td>0.499696</td>\n","      <td>0.012095</td>\n","      <td>0.022817</td>\n","      <td>94.075826</td>\n","      <td>6.886509e+07</td>\n","      <td>1.116840e+08</td>\n","      <td>9.051427e+04</td>\n","      <td>1.797290e+08</td>\n","      <td>0.073115</td>\n","      <td>2853.085559</td>\n","      <td>329.261590</td>\n","      <td>11104.542212</td>\n","      <td>818.223993</td>\n","      <td>5.705467</td>\n","      <td>1.162941e+08</td>\n","      <td>3.259841e+07</td>\n","      <td>0.005378</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.971914</td>\n","      <td>875.391479</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>8.661897e+06</td>\n","      <td>1.096472e+06</td>\n","      <td>0.000000e+00</td>\n","      <td>1.055422e+07</td>\n","      <td>0.043251</td>\n","      <td>0.000000</td>\n","      <td>-8514.867284</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.005000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000841</td>\n","      <td>956.845088</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>61.000000</td>\n","      <td>6.835078e+07</td>\n","      <td>5.333312e+07</td>\n","      <td>0.000000e+00</td>\n","      <td>1.245669e+08</td>\n","      <td>0.406592</td>\n","      <td>4557.690425</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>9.116280</td>\n","      <td>4.910643e+07</td>\n","      <td>4.847433e+07</td>\n","      <td>0.005000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.004399</td>\n","      <td>1018.213996</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>118.400000</td>\n","      <td>1.188415e+08</td>\n","      <td>1.138994e+08</td>\n","      <td>0.000000e+00</td>\n","      <td>2.344350e+08</td>\n","      <td>0.435157</td>\n","      <td>6351.402001</td>\n","      <td>0.000000</td>\n","      <td>6042.662797</td>\n","      <td>0.000000</td>\n","      <td>12.703787</td>\n","      <td>1.235979e+08</td>\n","      <td>5.245958e+07</td>\n","      <td>0.005000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.006536</td>\n","      <td>1064.555280</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>206.500000</td>\n","      <td>1.793306e+08</td>\n","      <td>2.232631e+08</td>\n","      <td>0.000000e+00</td>\n","      <td>4.011027e+08</td>\n","      <td>0.499745</td>\n","      <td>9316.582517</td>\n","      <td>0.000000</td>\n","      <td>11143.711821</td>\n","      <td>0.000000</td>\n","      <td>18.640984</td>\n","      <td>2.500571e+08</td>\n","      <td>7.312942e+07</td>\n","      <td>0.006074</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.123397</td>\n","      <td>1149.026125</td>\n","      <td>10.000000</td>\n","      <td>1.100000</td>\n","      <td>1.000000</td>\n","      <td>1.100000</td>\n","      <td>364.900000</td>\n","      <td>2.578125e+08</td>\n","      <td>4.353632e+08</td>\n","      <td>3.735351e+06</td>\n","      <td>6.924097e+08</td>\n","      <td>0.649837</td>\n","      <td>12022.177667</td>\n","      <td>22136.650964</td>\n","      <td>175202.239435</td>\n","      <td>32742.060121</td>\n","      <td>24.044355</td>\n","      <td>3.964472e+08</td>\n","      <td>2.005866e+08</td>\n","      <td>0.076565</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Price_LUSD  Price_Ether  ...  annualized_earning    base_rate\n","count  8640.000000  8640.000000  ...        8.640000e+03  8640.000000\n","mean      1.004321  1012.226951  ...        6.720582e+07     0.006916\n","std       0.007721    64.858108  ...        3.259841e+07     0.005378\n","min       0.971914   875.391479  ...        0.000000e+00     0.005000\n","25%       1.000841   956.845088  ...        4.847433e+07     0.005000\n","50%       1.004399  1018.213996  ...        5.245958e+07     0.005000\n","75%       1.006536  1064.555280  ...        7.312942e+07     0.006074\n","max       1.123397  1149.026125  ...        2.005866e+08     0.076565\n","\n","[8 rows x 20 columns]"]},"metadata":{"tags":[]},"execution_count":16}]}]}